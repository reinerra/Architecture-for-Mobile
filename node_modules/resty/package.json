{
  "name": "resty",
  "description": "Build quick and simple RESTfull APIs using Node.js and connect",
  "keywords": [
    "rest",
    "node",
    "connect",
    "simple"
  ],
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/SoapyIllusions/resty"
  },
  "author": {
    "name": "Alex Angelini",
    "email": "alex.louis.angelini@gmail.com"
  },
  "main": "resty",
  "engines": {
    "node": ">=0.4.10"
  },
  "scripts": {
    "test": "node_modules/vows/bin/vows ./tests/*"
  },
  "devDependencies": {
    "connect": "1.8.5",
    "vows": "0.6.1",
    "request": "2.9.3"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/SoapyIllusions/resty/raw/master/LICENSE"
    }
  ],
  "readme": "# Resty [![Build Status](https://secure.travis-ci.org/SoapyIllusions/resty.png)](http://travis-ci.org/SoapyIllusions/resty.png)\n\nBuild quick and simple RESTfull APIs using Node.js and connect\n\n## Description\n\nResty is a connect middleware which let's you build a simple REST interface for your application. I have found it especially useful when building single page web apps which need a server-side API.\n\nThe resources are all laid out in a simple directory structure which helps build a clean perspective of how people can interact with your API.\n\n## Installation\n\n    npm install resty\n\n## Usage\n\nSimply require the middleware and tell connect to use it:\n\n    var connect = require('connect');\n    var resty = require('resty');\n\n    var app = connect.createServer();\n    app.use(resty.middleware('/path/to/resources/folder'));\n    app.listen(8080);\n\nRemember to add middleware for authentication and file serving, as resty only provides the routing for the API resources.\n\n## Resource Folder\n\nHere is what an example resource folder may look like:\n\n    ├── songs\n    │   └── songs.js\n    └── users\n        ├── contacts\n        │   └── contacts.js\n        └── users.js\n\nWhere a file with the same name as the parent directory will contain the Resources methods and any subfolders are nested resources.\n\n## Resource Method\n\nAn over-simplified user resource may look like this:\n\n    var Users = {\n      Resource: {\n        get: function(uid, callback) {\n          callback(null, {uid: uid, query: this.query});\n        }\n      },\n\n      Collection: {\n        get: function(callback) {\n          callback(null, {all: 'users'});\n        }\n      }\n    }\n\n    module.exports = Users;\n\nUsers.Resource will be called if the url was `/users/123` and Users.Collection will be called if the url was `/users/`.\n",
  "_id": "resty@0.0.3",
  "_from": "resty"
}
